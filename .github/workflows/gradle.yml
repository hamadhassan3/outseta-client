name: Gradle Test, Build, Checkstyle and Code Coverage

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: gradle:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle
      - name: Make gradlew executable
        run: chmod +x gradlew
      - name: Build with Gradle
        uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
        with:
          arguments: build

  test:
    runs-on: ubuntu-latest
    container:
      image: gradle:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle
      - name: Make gradlew executable
        run: chmod +x gradlew
      - name: Run Gradle Tests
        run: ./gradlew test
      - name: JaCoCo Test Coverage
        run: ./gradlew jacocoTestCoverageVerification
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
         CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
         file: ./build/reports/jacoco/test/jacocoTestReport.xml

  publish:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main')
      || (github.event_name == 'pull_request' && github.event.action == 'closed' 
      && github.event.pull_request.base.ref == 'main' && github.event.workflow_run.conclusion == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle
      - name: Import GPG secret key
        run: |
         echo "${{ secrets.GPG_SECRET_KEY }}" > private.pgp
         gpg --import private.pgp
        shell: bash
      - name: Make gradlew executable
        run: chmod +x gradlew
      - name: Publish with Gradle
        run: ./gradlew publish
